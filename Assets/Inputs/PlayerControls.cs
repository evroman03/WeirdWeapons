//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""ShrimpActionMap"",
            ""id"": ""214a7288-f2a6-4a8f-95e4-8062aec5926a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2b8f9098-15c1-404d-9c8d-daffae408f68"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""1f18b184-dd02-43be-9706-7b42dc53d0ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuitGame"",
                    ""type"": ""Button"",
                    ""id"": ""6b33d5da-00d1-408a-88a9-ce8e441c17d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""330061ad-6b63-4412-bf10-56bc16bfa18f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9c2836a3-70a0-4e6b-b313-5e74be691e16"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""67e8cd28-905d-4807-852d-1b37242aa7eb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b6c42e48-3a84-4db2-b620-e2ba0e474499"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""161add69-5c19-4759-b429-5e12da9d35f0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuitGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShrimpActionMap
        m_ShrimpActionMap = asset.FindActionMap("ShrimpActionMap", throwIfNotFound: true);
        m_ShrimpActionMap_Move = m_ShrimpActionMap.FindAction("Move", throwIfNotFound: true);
        m_ShrimpActionMap_Restart = m_ShrimpActionMap.FindAction("Restart", throwIfNotFound: true);
        m_ShrimpActionMap_QuitGame = m_ShrimpActionMap.FindAction("QuitGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShrimpActionMap
    private readonly InputActionMap m_ShrimpActionMap;
    private List<IShrimpActionMapActions> m_ShrimpActionMapActionsCallbackInterfaces = new List<IShrimpActionMapActions>();
    private readonly InputAction m_ShrimpActionMap_Move;
    private readonly InputAction m_ShrimpActionMap_Restart;
    private readonly InputAction m_ShrimpActionMap_QuitGame;
    public struct ShrimpActionMapActions
    {
        private @PlayerControls m_Wrapper;
        public ShrimpActionMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ShrimpActionMap_Move;
        public InputAction @Restart => m_Wrapper.m_ShrimpActionMap_Restart;
        public InputAction @QuitGame => m_Wrapper.m_ShrimpActionMap_QuitGame;
        public InputActionMap Get() { return m_Wrapper.m_ShrimpActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShrimpActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IShrimpActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ShrimpActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShrimpActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @QuitGame.started += instance.OnQuitGame;
            @QuitGame.performed += instance.OnQuitGame;
            @QuitGame.canceled += instance.OnQuitGame;
        }

        private void UnregisterCallbacks(IShrimpActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @QuitGame.started -= instance.OnQuitGame;
            @QuitGame.performed -= instance.OnQuitGame;
            @QuitGame.canceled -= instance.OnQuitGame;
        }

        public void RemoveCallbacks(IShrimpActionMapActions instance)
        {
            if (m_Wrapper.m_ShrimpActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShrimpActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ShrimpActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShrimpActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShrimpActionMapActions @ShrimpActionMap => new ShrimpActionMapActions(this);
    public interface IShrimpActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnQuitGame(InputAction.CallbackContext context);
    }
}
